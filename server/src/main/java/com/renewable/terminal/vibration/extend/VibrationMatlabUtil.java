package com.renewable.terminal.vibration.extend;

import com.mathworks.toolbox.javabuilder.MWException;
import com.mathworks.toolbox.javabuilder.MWNumericArray;
import shujujifen.Class1;

import java.util.Arrays;

/**
 * @Descriptionï¼š
 * @Author: jarry
 */
public class VibrationMatlabUtil {
	private static Class1 class1;

	static {
		try {
			class1 = new Class1();
		} catch (MWException e) {
			e.printStackTrace();
		}
	}

	public static Object[] calMaxArrayWithTimeArea(Double[][] data, Integer sensorType, Double fs, Double mode, Double theta) throws MWException {
		Object[] resultArray = class1.threevibrationdatatransfermax(3, data, sensorType, fs, mode, theta);
		return resultArray;
	}

	public static double getDoubleFromMWNumericArray(Object[] objectArray, Integer arrayIndex, Integer MWNumericArrayIndex) {
		if (arrayIndex == null) {
			arrayIndex = 0;
		}
		if (MWNumericArrayIndex == null) {
			MWNumericArrayIndex = 1;
		}
		return ((MWNumericArray) objectArray[arrayIndex]).getDouble(MWNumericArrayIndex);
	}


	// test
	public static void main(String[] args) throws MWException {
		Double[][] data = new Double[][]{{1.1, 1.3, 1.1, 1.22, 1.23, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22,}, {1.1, 1.3, 1.1, 1.22, 1.23, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22, 1.1, 1.3, 1.1, 1.22,}};
		Integer sensorType = 1;
		Double fs = 20.0;
		Double mode = 1.2;
		Double theta = 1.2;
		Object[] result = calMaxArrayWithTimeArea(data, sensorType, fs, mode, theta);

		System.out.println(Arrays.toString(result));
		double data1 = getDoubleFromMWNumericArray(result, 0, 1);
		System.out.println(data1);
		double data2 = getDoubleFromMWNumericArray(result, 0, 2);
		System.out.println(data2);
	}


}
